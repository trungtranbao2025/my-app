-- ============================================
-- FIX NOTIFICATIONS RLS POLICIES
-- ============================================
-- Script n√†y s·∫Ω ki·ªÉm tra v√† s·ª≠a RLS policies cho b·∫£ng notifications

-- 1. Ki·ªÉm tra c√°c policies hi·ªán t·∫°i
SELECT 
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd,
  qual,
  with_check
FROM pg_policies
WHERE schemaname = 'public' AND tablename = 'notifications';

-- 2. X√≥a t·∫•t c·∫£ policies c≈©
DROP POLICY IF EXISTS "Users can view their own notifications" ON public.notifications;
DROP POLICY IF EXISTS "Users can insert their own notifications" ON public.notifications;
DROP POLICY IF EXISTS "Users can update their own notifications" ON public.notifications;
DROP POLICY IF EXISTS "Users can delete their own notifications" ON public.notifications;
DROP POLICY IF EXISTS "Enable read access for users" ON public.notifications;
DROP POLICY IF EXISTS "Enable insert for authenticated users" ON public.notifications;
DROP POLICY IF EXISTS "Enable update for users based on user_id" ON public.notifications;
DROP POLICY IF EXISTS "Enable delete for users based on user_id" ON public.notifications;

-- 3. T·∫°o policies m·ªõi ƒë∆°n gi·∫£n v√† r√µ r√†ng
-- Policy cho SELECT: User ch·ªâ th·∫•y notifications c·ªßa m√¨nh
CREATE POLICY "notifications_select_policy" 
ON public.notifications
FOR SELECT
TO authenticated
USING (auth.uid() = user_id);

-- Policy cho INSERT: B·∫•t k·ª≥ authenticated user n√†o c≈©ng c√≥ th·ªÉ t·∫°o notification
CREATE POLICY "notifications_insert_policy" 
ON public.notifications
FOR INSERT
TO authenticated
WITH CHECK (true);

-- Policy cho UPDATE: User ch·ªâ update notifications c·ªßa m√¨nh
CREATE POLICY "notifications_update_policy" 
ON public.notifications
FOR UPDATE
TO authenticated
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Policy cho DELETE: User ch·ªâ delete notifications c·ªßa m√¨nh
CREATE POLICY "notifications_delete_policy" 
ON public.notifications
FOR DELETE
TO authenticated
USING (auth.uid() = user_id);

-- 4. ƒê·∫£m b·∫£o RLS ƒë∆∞·ª£c b·∫≠t
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

-- 5. ƒê·∫£m b·∫£o realtime ƒë∆∞·ª£c b·∫≠t cho b·∫£ng n√†y (b·ªè qua n·∫øu ƒë√£ t·ªìn t·∫°i)
DO $$
BEGIN
  -- Try to add table to publication, ignore if already exists
  BEGIN
    ALTER PUBLICATION supabase_realtime ADD TABLE public.notifications;
  EXCEPTION WHEN duplicate_object THEN
    RAISE NOTICE 'Table notifications already in publication, skipping...';
  END;
END $$;

-- 6. Test query nh∆∞ frontend s·∫Ω ch·∫°y
-- Thay 'hohoangtien94@gmail.com' b·∫±ng email c·ªßa b·∫°n
DO $$
DECLARE
  test_user_id uuid;
  notification_count int;
BEGIN
  -- L·∫•y user_id t·ª´ email
  SELECT id INTO test_user_id 
  FROM auth.users 
  WHERE email = 'hohoangtien94@gmail.com';
  
  IF test_user_id IS NULL THEN
    RAISE NOTICE '‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi email n√†y';
    RETURN;
  END IF;
  
  RAISE NOTICE '‚úÖ User ID: %', test_user_id;
  
  -- ƒê·∫øm notifications
  SELECT COUNT(*) INTO notification_count
  FROM public.notifications
  WHERE user_id = test_user_id;
  
  RAISE NOTICE 'üìä S·ªë notifications: %', notification_count;
  
  -- Hi·ªÉn th·ªã 5 notifications m·ªõi nh·∫•t s·∫Ω ƒë∆∞·ª£c show ·ªü query cu·ªëi
  RAISE NOTICE 'üìã Xem 5 notifications m·ªõi nh·∫•t ·ªü b·∫£ng Results b√™n d∆∞·ªõi';
  
END $$;

-- 7. Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
SELECT 
  id,
  type,
  title,
  left(message, 50) as message_preview,
  is_read,
  created_at
FROM public.notifications
WHERE user_id = (
  SELECT id FROM auth.users WHERE email = 'hohoangtien94@gmail.com'
)
ORDER BY created_at DESC
LIMIT 10;
