import { createClient } from '@supabase/supabase-js'

// B·∫ÆT BU·ªòC d√πng bi·∫øn m√¥i tr∆∞·ªùng; kh√¥ng d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh k·∫øt n·ªëi nh·∫ßm d·ª± √°n
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  const msg = 'Thi·∫øu c·∫•u h√¨nh Supabase (VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY). Vui l√≤ng t·∫°o file .env.local v√† kh·ªüi ƒë·ªông l·∫°i.'
  // Th√¥ng b√°o r√µ r√†ng trong console v√† UI dev
  // eslint-disable-next-line no-alert
  if (typeof window !== 'undefined') try { alert(msg) } catch {}
  throw new Error(msg)
}

console.log('‚úÖ Supabase connected:', supabaseUrl)

// X√≥a session Supabase ƒë√£ h·∫øt h·∫°n ƒë·ªÉ tr√°nh client auto refresh ngay khi kh·ªüi ƒë·ªông
const clearExpiredSupabaseSessions = () => {
  try {
    const nowSec = Math.floor(Date.now() / 1000)
    for (const k of Object.keys(localStorage)) {
      if (k.startsWith('sb-') && k.includes('auth-token')) {
        try {
          const raw = localStorage.getItem(k)
          const obj = raw ? JSON.parse(raw) : null
          const exp = obj?.expires_at || obj?.expires_in
          if (typeof exp === 'number' && exp > 0 && exp < nowSec) {
            localStorage.removeItem(k)
          }
        } catch {}
      }
    }
  } catch {}
}

clearExpiredSupabaseSessions()

// Custom fetch with timeout + clearer error cho m·∫°ng ch·∫≠p ch·ªùn
const withTimeout = (ms = 8000) => async (input, init = {}) => {
  const ctrl = new AbortController()
  const id = setTimeout(() => ctrl.abort(), ms)
  try {
    // R√∫t ng·∫Øn/Ch·∫∑n ri√™ng cho ƒë∆∞·ªùng refresh_token ƒë·ªÉ tr√°nh ch·ªù l√¢u 8s
    const urlStr = typeof input === 'string' ? input : (input?.url || '')
    if (urlStr.includes('/auth/v1/token?grant_type=refresh_token')) {
      clearTimeout(id)
      // Ch·∫∑n h·∫≥n ƒë·ªÉ kh√¥ng t·∫°o spam; tr·∫£ v·ªÅ l·ªói nhanh
      return new Response(null, { status: 499, statusText: 'refresh_blocked' })
    }

    const res = await fetch(input, { ...init, signal: ctrl.signal })
    return res
  } catch (err) {
    if (err?.name === 'AbortError') {
      const url = typeof input === 'string' ? input : (input?.url || '')
      // Gi·∫£m ·ªìn: kh√¥ng log c·∫£nh b√°o cho refresh_token b·ªã ch·∫∑n/abort
      if (!url.includes('/auth/v1/token?grant_type=refresh_token')) {
        console.warn(`‚è≥ Supabase fetch timeout after ${ms}ms:`, url)
      }
    }
    throw err
  } finally {
    clearTimeout(id)
  }
}

// Dynamic timeout: d√†i h∆°n cho upload/download Storage ƒë·ªÉ tr√°nh abort khi file l·ªõn
const timeoutFetch = async (input, init = {}) => {
  const url = typeof input === 'string' ? input : (input?.url || '')
  const method = String(init?.method || 'GET').toUpperCase()
  const isStorage = /\/storage\/v1\//.test(url)
  const isUpload = isStorage && (method === 'POST' || method === 'PUT')
  // 120s cho upload/storage, 20s m·∫∑c ƒë·ªãnh cho c√°c API kh√°c
  const ms = isUpload ? 120_000 : 20_000
  return withTimeout(ms)(input, init)
}

// Ch·∫ø ƒë·ªô kh·ªüi t·∫°o th√¢n thi·ªán offline: tr√°nh g·ªçi refresh-token khi ƒëang m·∫•t m·∫°ng
const OFFLINE_INIT = (
  typeof navigator !== 'undefined' && navigator.onLine === false
) || (import.meta?.env?.VITE_SUPABASE_OFFLINE_INIT === '1')

const authOptionsOnline = {
  // T·∫Øt auto refresh ƒë·ªÉ tr√°nh v√≤ng l·∫∑p timeout khi m·∫°ng b·ªã ch·∫∑n
  autoRefreshToken: false,
  persistSession: true,
  detectSessionInUrl: true,
  storage: window.localStorage,
  storageKey: 'qlda-auth-token',
  flowType: 'pkce'
}
const authOptionsOffline = {
  autoRefreshToken: false,
  persistSession: false,
  detectSessionInUrl: false,
  storage: window.localStorage,
  storageKey: 'qlda-auth-token',
  flowType: 'pkce'
}

const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: OFFLINE_INIT ? authOptionsOffline : authOptionsOnline,
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  global: {
    headers: {
      'x-client-info': 'qlda-web-app'
    },
    fetch: timeoutFetch
  }
})

// Khi c√≥ m·∫°ng tr·ªü l·∫°i, c·ªë g·∫Øng kh·ªüi t·∫°o l·∫°i session (n·∫øu c√≥)

// Khi c√≥ m·∫°ng tr·ªü l·∫°i, c·ªë g·∫Øng kh·ªüi t·∫°o l·∫°i session (n·∫øu c√≥)
if (typeof window !== 'undefined') {
  window.addEventListener('online', async () => {
    try {
      // Khi m·∫°ng tr·ªü l·∫°i: th·ª≠ refresh token th·ªß c√¥ng n·∫øu c√≤n session
      const { data: { session } } = await supabase.auth.getSession()
      if (session) {
        await supabase.auth.refreshSession()
      }
    } catch (e) {
      console.warn('üîÅ Retry getSession on online failed:', e?.message || e)
    }
  })
}

// Expose supabase to window for debugging
if (typeof window !== 'undefined') {
  window.supabase = supabase
  console.log('‚úÖ Supabase client exposed to window.supabase for debugging')
}

// Export everything as default to fix Android WebView bundling
export default {
  supabase,
  SUPABASE_URL: supabaseUrl,
  SUPABASE_ANON_KEY: supabaseAnonKey
}
